"""
Django settings for quiz_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")
DEBUG = env("DEBUG")
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",  # Required by django-allauth
    "corsheaders",
    # Third-party
    "rest_framework",
    "rest_framework.authtoken",  # Needed by dj-rest-auth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",  # For Google OAuth
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "rest_framework_simplejwt",
    # Your app
    "quiz_app",
]

MIDDLEWARE = [
    # Add CORS middleware here
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",  # Keep for Admin or if you use forms with session auth
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # Add Account middleware here
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "quiz_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "quiz_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "quiz_app.CustomUser"

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",  # Optional, good for browsable API
        "rest_framework.authentication.BasicAuthentication",  # Optional
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",  # Default to requiring auth unless specified otherwise
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,  # Example pagination size
}

SITE_ID = 1

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,  # Or use a separate key
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
    "SLIDING_TOKEN_OBTAIN_PAIR_VIEW": "rest_framework_simplejwt.views.TokenObtainPairView",
    "SLIDING_TOKEN_REFRESH_VIEW": "rest_framework_simplejwt.views.TokenRefreshView",
    "SLIDING_TOKEN_VERIFY_VIEW": "rest_framework_simplejwt.views.TokenVerifyView",
}

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",  # Needed for allauth
]

ACCOUNT_LOGIN_METHODS = ["email"]  # Use a list or tuple
ACCOUNT_SIGNUP_FIELDS = ["email"]  # If email is required and username is not
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = "optional"  # Or 'mandatory' or 'none'

SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": env("GOOGLE_CLIENT_ID"),
            "secret": env("GOOGLE_CLIENT_SECRET"),
            "key": "",
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}

# DJ_REST_AUTH settings
# Optional: Set this if you want to use JWTs as the default token type
REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_COOKIE": None,  # Or 'my-app-auth' if you prefer httpOnly cookies
    "JWT_AUTH_REFRESH_COOKIE": None,  # Or 'my-app-refresh'
    "JWT_AUTH_SECURE": False,  # Set to True in production with HTTPS
    "JWT_AUTH_HTTPONLY": False,  # Set to True for httpOnly cookies
    "JWT_AUTH_SAMESITE": "Lax",  # Or 'None' with JWT_AUTH_SECURE=True
    "USER_DETAILS_SERIALIZER": "quiz_app.serializers.UserSerializer",  # Use your custom user serializer
    # Set this if you want to customize registration serializer
    "REGISTER_SERIALIZER": "dj_rest_auth.registration.serializers.RegisterSerializer",  # Default
    "SOCIAL_ACCOUNT_ADAPTER": "dj_rest_auth.social_accounts.adapters.SocialAccountAdapter",
}

# DJ_REST_AUTH registration settings
REST_AUTH_REGISTER_SERIALIZERS = {
    # Optional: Customize registration if needed
    # 'REGISTER_SERIALIZER': 'path.to.your.CustomRegisterSerializer',
}

# For social authentication callback URLs
SOCIALACCOUNT_LOGIN_REDIRECT = (
    "/accounts/google/login/callback/"  # Or your frontend redirect
)
# ACCOUNT_ADAPTER = "dj_rest_auth.adapters.RestAllauthAdapter"
# AUTHENTICATION_BACKENDS includes 'allauth.account.auth_backends.AuthenticationBackend' already
#
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Allow your frontend during development
    "https://your-frontend-domain.com",  # Your production frontend domain
]
TEST_RUNNER = "pytest_django.runner.TestCaseMatcher"
